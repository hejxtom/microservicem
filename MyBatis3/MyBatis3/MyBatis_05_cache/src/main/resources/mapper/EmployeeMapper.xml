<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace:名称空间;指定为接口的全类名
    id：唯一标识
    resultType：返回值类型
    #{id}：从传递过来的参数中取出id值

    对应的方法：public Employee getEmpById(Integer id);
-->
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapper">
    <!--
        导入ehcachecache
            注意：必须在类路径下放入ehcache.xml
                如果其他的mapper.xml需要用则写入<cache-ref/>:引用缓存：namespace：指定和哪个名称空间下的缓存一样
        -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
    <!--
        eviction:缓存的回收策略：
            • LRU – 最近最少使用的：移除最长时间不被使用的对象。
            • FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
            • SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
            • WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
            • 默认的是 LRU。
        flushInterval：缓存刷新间隔
            缓存多长时间清空一次，默认不清空，设置一个毫秒值
        readOnly:是否只读：
            true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
                     mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
            false：非只读：mybatis觉得获取的数据可能会被修改。
                    mybatis会利用序列化&反序列的技术克隆一份新的数据给你。安全，速度慢
        size：缓存存放多少元素；
        type=""：指定自定义缓存的全类名；
                实现Cache接口即可；
	-->
    <cache eviction="FIFO" flushInterval="600" readOnly="false" size="1024"></cache>

    <!--    开启驼峰命名法后    -->
    <!--  <select id="getEmpById" resultType="com.atguigu.mybatis.bean.Employee">
        select *
        from tbl_employee
        where id = #{id}
    </select>-->

    <!--  取别名后  -->
<!--    <select id="getEmpById" resultType="employee">
        select id,
               last_name lastName,
               email,
               gender
        from tbl_employee
        where id = #{id}
    </select>-->


    <!--
        databaseId属性：标识数据库厂商id
        与<databaseIdProvider/>(定义在mybatis-config.xml)配套使用
    -->
    <select id="getEmpById" resultType="com.atguigu.mybatis.bean.Employee" databaseId="mysql">
        select id,
               last_name lastName,
               email,
               gender
        from tbl_employee
        where id = #{id}
    </select>

    <!-- public void addEmp(Employee employee); -->
    <!-- parameterType：参数类型，可以省略，
        获取自增主键的值：
            mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
            useGeneratedKeys="true"；使用自增主键获取主键值策略
            keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
    -->
    <insert id="addEmp" parameterType="com.atguigu.mybatis.bean.Employee" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name, email, gender)
        values (#{lastName}, #{email}, #{gender})
    </insert>



    <update id="updateEmp" parameterType="com.atguigu.mybatis.bean.Employee">
        update tbl_employee
        set last_name=#{lastName},
            email=#{email},
            gender=#{gender}
        where id = #{id}
    </update>

   <delete id="deleteEmpById" parameterType="java.lang.Integer">
       delete from tbl_employee where id=#{id}
   </delete>


    <select id="getEmpByIdAndLastName" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where id=#{id}  and last_name=#{lastName}
    </select>


    <!-- resultType:如果返回的是一个集合，要写集合中元素的类型  -->
    <select id="getEmpByLastNameLike" resultType="com.atguigu.mybatis.bean.Employee">
        select *
        from tbl_employee
        where last_name like concat('%', #{lastName}, '%')
    </select>


    <select id="getEmpByIdReturnMap" resultType="map">
        select * from tbl_employee where id=#{id};
    </select>

    <select id="getEmpByLastNameLikeReturnMap" resultType="com.atguigu.mybatis.bean.Employee">
        select *
        from tbl_employee
        where last_name like concat('%', #{lastName}, '%')
    </select>


</mapper>